* simple-resturant api
Simple restaurant api project is a part of Paidy technical assesment.

* Assignment (breif)
Create a restaurant application which accepts menu items from various serving staff in the restaurant. This application must then store the item along with a cooking time for the item to be completed. The application must be able to give a quick snapshot of any or all items on its list at any time. It must also be able to remove specific orders from the list of orders on demand.

The full assignment and can be found at [[https://github.com/paidy/interview/blob/master/SimpleRestaurantApi.md][Paidy Simple Resturant Api]].

** Actors
+ Application : a “server” and accepting calls from devices carried by restaurant staff to process guest’s menu orders.
+ Client : Multiple "tablets" carried by restaurant staff to take orders.

** Requirements
+ The server API MUST fully follow REST API principles and present a set of HTTP endpoints to connect to.
+ The client (the restaurant staff “devices” making the requests) MUST be able to: add one or more items with a table number, remove an item for a table, and query the items still remaining for a table.
+ The application MUST, upon creation request, store the item, the table number, and how long the item will take to cook.
+ The application MUST, upon deletion request, remove a specified item for a specified table number.
+ The application MUST, upon query request, show all items for a specified table number.
+ The application MUST, upon query request, show a specified item for a specified table number.
+ The application MUST accept at least 10 simultaneous incoming add/remove/query requests.
+ The client MAY limit the number of specific tables in its requests to a finite set (at least 100).
+ The application MAY assign a length of time for the item to prepare as a random time between 5-15 minutes.
+ The application MAY keep the length of time for the item to prepare static (in other words, the time does not have to be counted down in real time, only upon item creation and then removed with the item upon item deletion).

*** Assumptions
TODO.

* How to
** Prerequisites
*** Building/running
**** Docker (Recommended)
+ Any modern version of docker. (https://docs.docker.com/build/)
+ Any version of docker compose.(https://docs.docker.com/compose/)

This project comes with an docker image to reduce the overhead of setting up the build system locally.

The motivation for recommending this method is not performance but convenience for the reviewer. Please keep this in mind.

**** Local
TODO.

** Overview
The project comes with a Makefile that has a few commands to help you run the project.
Please refer to the help rule for more information about the specifics of each rule.

#+begin_src sh
make help
#+end_src

To interact with the provided cargo makefile, please use the "task" rule.

#+begin_src sh
# For example
make task run
#+end_src

** Run
*** Docker
To run both server and client.
#+begin_src sh
make run
#+end_src

To run a specific module
#+begin_src sh
make run server
#+end_src
*** Local

#+begin_src sh
make task run
#+end_src
** Test
TODO
