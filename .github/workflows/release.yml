name: "Release workflow"

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release"
        required: true

jobs:
  release:
    name: ${{ matrix.target }} - Release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            archive: tar.gz
            module: "server"
          - target: x86_64-unknown-linux-musl
            archive: tar.gz
            module: "client"
    steps:
      - name: Fetch Repository
        uses: actions/checkout@v4
      - name: Get tagged version
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
          else
            echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
          fi
      - name: Update Cargo.toml version
        run: |
          VER=$(echo "$VERSION" | sed 's/[^0-9.]//g')
          sed -i "s/^version = .*/version = \"$VER\"/" modules/${{ matrix.module }}/Cargo.toml
      - name: Release/Compile
        uses: rust-build/rust-build.action@v1.4.5
        id: comp
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          TOOLCHAIN_VERSION: "1.79.0"
          RUSTTARGET: ${{ matrix.target }}
          SRC_DIR: "modules/${{ matrix.module }}"
          ARCHIVE_TYPES: ${{ matrix.archive }}
          MINIFY: "yes"
          ARCHIVE_NAME: "simple-restaurant-${{ matrix.module }}-${{ env.VERSION }}-${{ matrix.target }}"

      - name: Release upload
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ls modules/${{ matrix.module }}/target/release
          echo "====="
          ls modules/${{ matrix.module }}/target/${{ matrix.target }}/
          echo "====="
          ls modules/${{ matrix.module }}/target/${{ matrix.target }}/release
          echo "====="
          sudo chmod -R 755 modules/${{ matrix.module }}/target/${{ matrix.target }}/release/${{ matrix.module }}
          sudo tar --no-same-owner -xvf ${{ steps.compile.outputs.BUILT_ARCHIVE }} -C modules/${{ matrix.module }}/target/${{ matrix.target }}/release/${{ matrix.module }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKER_REGISTRY_PAT_TOKEN }}
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx.cache-api-${{ matrix.module }}
          key: ${{ runner.os }}-api-${{ matrix.module }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-api-
            ${{ runner.os }}-buildx-
      - name: Docker meta
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/wenrir/simple-restaurant-${{ matrix.module }}
          labels: |
            org.opencontainers.image.version=${{ github.sha }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.description="Simple API for technical assessment."
            org.opencontainers.image.documentation="${{ github.event.repository.clone_url }}/README.org"
            org.opencontainers.image.title="Restaurant-${{ matrix.module }}"
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
      - name: ${{ matrix.module }} Image
        uses: docker/build-push-action@v6
        with:
          context: ./modules
          target: release
          build-args: |
            MODULE_NAME=${{ matrix.module }}
          load: true
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx.cache-api-${{ matrix.module }}
          cache-to: type=local,dest=/tmp/.buildx.cache-api-${{ matrix.module }}-new,mode=max

      # Avoid cache to infinitely grow, quite ugly but ...
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx.cache-api-${{ matrix.module }}
          mv /tmp/.buildx.cache-api-${{ matrix.module }}-new /tmp/.buildx.cache-api-${{ matrix.module }}
